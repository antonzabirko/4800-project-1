"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("@tensorflow/tfjs");
/**
 * A `Box` `Space` class.
 *
 * Used for spaces with a continuous sample space as opposed to discrete.
 *
 * @example
 * ```typescript
 * ```
 */
var Box = /** @class */ (function () {
    /**
     * @param low - The lower bound of the box
     * @param high - The upper bound of the box
     * @param shape - The shape of the space. Must be provided if
     *  the low and high are single numbers
     */
    function Box(low, high, shape) {
        if (shape === void 0) { shape = null; }
        this.type = 'Box';
        if (shape !== null) {
            this.shape = shape;
            this.low = low[0];
            this.high = high[0];
            this.isShaped = true;
        }
        else {
            // assert low.length === high.length;
            this.shape = [low.length];
            this.low = low;
            this.high = high;
            this.isShaped = false;
        }
    }
    /**
     * Sample a random value from this `Space`.
     *
     * @returns - A random sample.
     */
    Box.prototype.sample = function () {
        var _this = this;
        if (this.isShaped) {
            return tf.randomNormal(this.shape, this.low, this.high);
        }
        else {
            return tf.tidy(function () {
                var stack = [];
                for (var q = 0; q < _this.shape; q++) {
                    stack.push(tf.randomUniform([1], _this.low[q], _this.high[q]));
                }
                return tf.concat1d(stack);
            });
        }
    };
    // Currently unused
    Box.prototype.seed = function (seed) {
        this.seedValue = seed;
    };
    Box.prototype.set = function (space) {
        this.sampleSpace = space;
    };
    Box.prototype.get = function () {
        return this.sampleSpace;
    };
    Box.prototype.toString = function () {
        return this.type + ': ' + this.shape.toString();
    };
    return Box;
}());
exports.default = Box;

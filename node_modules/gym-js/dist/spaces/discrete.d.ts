import Space from './space';
import * as tf from '@tensorflow/tfjs';
/**
 * A `Discrete` `Space` class.
 *
 * Used for spaces with a discrete sample space as opposed to continuous.
 *
 * @example
 * ```typescript
 * const disc = new Discrete([6]);
 * console.log(disc.toString());
 * > Discrete: [6]
 *
 * const sample = disc.sample();
 * console.log(sample);
 * > 2
 * ```
 */
export default class Discrete implements Space {
    shape: number[];
    type: any;
    sampleSpace: tf.Tensor;
    seedValue: number;
    length: number;
    /**
     * @param shape - The shape of the space
     */
    constructor(shape: number[]);
    /**
     * Sample a random value from this `Space`.
     *
     * @returns - A random sample.
     */
    sample(): number;
    seed(seed: number): void;
    set(space: tf.Tensor): void;
    get(): tf.Tensor;
    toString(): string;
}
/**
 * A tuple of [[Discrete]] Spaces.
 *
 * A convenience class for sampling a tuple of [[Discrete]] spaces.
 *
 * @example
 * ```typescript
 * const discTuple = new DiscreteTuple([2,2,6]);
 * console.log(discTuple.toString());
 * > DiscreteTuple: [2, 2, 6]
 *
 * const sample = discTuple.sample();
 * console.log(sample);
 * > [0,1,3]
 * ```
 */
export declare class DiscreteTuple implements Space {
    shape: number[];
    type: string;
    sampleSpace: Discrete[];
    seedValue: number;
    length: number;
    /**
     * @param shape - The shape of the tuple.
     */
    constructor(shape: number[]);
    setSampleSpace(value: any): void;
    /**
     * Sample a random value from this `Space`.
     *
     * @returns - A tuple of random samples.
     */
    sample(): number[];
    seed(seed: number): void;
    set(space: tf.Tensor): void;
    get(): tf.Tensor;
    toString(): string;
}
//# sourceMappingURL=discrete.d.ts.map
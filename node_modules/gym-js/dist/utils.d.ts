/** @ignore */
declare function choice(array: number[] | number[][] | number[][][] | number[][][][] | number[][][][][] | number[][][][][][]): number | number[] | number[][] | number[][][] | number[][][][] | number[][][][][];
/** @ignore */
declare function sleep(ms: any): Promise<unknown>;
/** Convert an array-like type to an actual array. */
declare function toArrayLike(obj: any): [];
/** Convert a num-like type to an actual number. */
declare function toNumLike(obj: any): number;
/**
 * Get a range of numbers.
 *
 * @param s1 - The end of the range if `s2` is undefined else the start.
 *  Starting at 0.
 * @param s2 - The end of the range.
 */
declare function range(s1: number, s2?: number): number[];
/**
 * Get a random array of integers with size `n` in the range [0; s1) or [s1, s2).
 *
 * @param s1 - The maximum random value (not inclusive) if `s2` is undefined else the minimum (inclusive).
 * @param s2 - The maximum random value (not inclusive).
 * @param n - The size of the array to return. If 1, returns `number`.
 * @returns - An array of random values.
 */
declare function randint(s1: number, s2?: number, n?: number): number | number[];
export { choice, sleep, toArrayLike, range, randint, toNumLike };
//# sourceMappingURL=utils.d.ts.map
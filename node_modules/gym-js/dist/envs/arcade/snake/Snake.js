"use strict";
// import codependency from "codependency";
// var requirePeer = codependency.register(module);
// var Phaser = requirePeer("phaser");
Object.defineProperty(exports, "__esModule", { value: true });
var Phaser = require("phaser");
var SnakeGame_1 = require("./SnakeGame");
var discrete_1 = require("../../../spaces/discrete");
var tf = require("@tensorflow/tfjs");
var utils_1 = require("../../../utils");
var PhaserUtils_1 = require("../../../PhaserUtils");
var defaultConfig = {
    title: 'Snake',
    width: 640,
    height: 480,
    scene: SnakeGame_1.default,
    parent: PhaserUtils_1.PHASER_PARENT,
    backgroundColor: '#f4e542',
    physics: {
        default: 'arcade',
        arcade: {
            debug: false,
        },
    }
};
/**
 * The game of snake. Made with `Phaser`.
 *
 * Observations are the pixels of the game of default size `[640, 480, 3]`;
 *
 * Game code adapted from https://labs.phaser.io/view.html?src=src\games\snake\part7.js
 *
 * @example
 * ```typescript
 * import {Snake} from "gym-js";
 * const env = new Snake();
 *
 * console.log(env.action_space.toString());
 * > Discrete [4]
 * console.log(env.observation_space.toString());
 * > Discrete [640, 480, 3]
 *
 * let action = env.action_space.sample();
 * let [obs, rew, done, info] = env.step(action);
 * ```
 */
var Snake = /** @class */ (function () {
    /**
     * @param config - A configuration object, detailing the game settings. See
     * the default config below.
     */
    function Snake(config) {
        var _this = this;
        if (config === void 0) { config = defaultConfig; }
        /**
         * Possible Actions:
         * 0. left
         * 1. up
         * 2. right
         * 3. down
         * The snake is not able to move opposite its current direction.
         */
        this.action_space = new discrete_1.default([4]);
        /**
         * The pixel values of the game (640x480).
         */
        this.observation_space = new discrete_1.default([640, 480, 3]);
        /**
         * The value of eating the food:
         * - +1 for eating food
         * - -1 for crashing into itself
         * - 0 else
         */
        this.reward_range = new discrete_1.default([3]);
        this.renderDisplay = true;
        this.done = false;
        this.verbose = true;
        this.info = {
            observationSpace: this.observation_space.toString(),
            rewardSpace: this.reward_range.toString(),
            actionSpace: this.action_space.toString(),
            actionDesc: {
                0: 'left',
                1: 'right',
                2: 'up',
                3: 'down',
            },
        };
        this.config = PhaserUtils_1.validateConfig(config, defaultConfig);
        this.game = new Phaser.Game(config);
        // Post render callback doesn't seem to work for stopping
        // the game from running despite my best efforts.
        // This is my current fix - it's hideous but until I
        // find a better way to pause the game from running and
        // step it manually, this is it.
        setTimeout(function () { return _this.game.loop.sleep(); }, 200);
    }
    Snake.prototype.step = function (action) {
        var info = {};
        console.assert(action >= 0 && action <= 3, 'The action you made is not in the action space!');
        if (this.done === true) {
            console.warn("You've called 'step()' although the environment has already returned 'done=true'. You should always call 'reset()' once you receive 'done=true'");
        }
        this.done = this._checkDone();
        this._setAction(action);
        // Step the game
        this.game.loop.tick();
        this.observation_space.set(this._getObs());
        var reward = this._getReward();
        if (reward != 0 && this.verbose) {
            console.info('Reward received: ' + reward.toString());
        }
        return [this.observation_space.get(), reward, this.done, info];
    };
    Snake.prototype.reset = function (config) {
        var _this = this;
        this.game.destroy(true);
        if (config !== undefined)
            this.config = PhaserUtils_1.validateConfig(config, defaultConfig);
        this.game = new Phaser.Game(this.config);
        setTimeout(function () { return _this.game.loop.sleep(); }, 200);
        this.observation_space.set(this._getObs());
        return this.observation_space.get();
    };
    Snake.prototype.render = function (value) {
        var _this = this;
        if (value === void 0) { value = true; }
        this.game.destroy(true);
        this.config["type"] = value ? Phaser.WEBGL : Phaser.HEADLESS;
        this.game = new Phaser.Game(this.config);
        setTimeout(function () { return _this.game.loop.sleep(); }, 200);
        this.renderDisplay = value;
    };
    Snake.prototype.close = function (removeCanvas) {
        if (removeCanvas === void 0) { removeCanvas = false; }
        this.game.destroy(removeCanvas);
    };
    Snake.prototype.seed = function (seed) {
        this.game.scene.scenes.forEach(function (s) {
            s.seed = seed;
            s.random.sow(seed.toString());
        });
    };
    Snake.prototype._getObs = function () {
        return tf.browser.fromPixels(this.game.canvas);
    };
    Snake.prototype._setAction = function (action) {
        this.game.scene.scenes[0].action = action;
    };
    Snake.prototype._checkDone = function () {
        return this.game.scene.scenes[0].done;
    };
    Snake.prototype._getReward = function () {
        var rew = this.game.scene.scenes[0].reward;
        this.game.scene.scenes[0].reward = 0;
        return rew;
    };
    return Snake;
}());
exports.default = Snake;
function demo() {
    var game = new Snake();
    setInterval(function () {
        var action = utils_1.toNumLike(game.action_space.sample());
        game.step(action);
    }, 1000);
}
module.exports.demo = demo;

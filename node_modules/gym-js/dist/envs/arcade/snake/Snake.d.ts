import * as Phaser from "phaser";
import Env from '../../../core';
import Discrete from '../../../spaces/discrete';
import * as tf from '@tensorflow/tfjs';
/**
 * The game of snake. Made with `Phaser`.
 *
 * Observations are the pixels of the game of default size `[640, 480, 3]`;
 *
 * Game code adapted from https://labs.phaser.io/view.html?src=src\games\snake\part7.js
 *
 * @example
 * ```typescript
 * import {Snake} from "gym-js";
 * const env = new Snake();
 *
 * console.log(env.action_space.toString());
 * > Discrete [4]
 * console.log(env.observation_space.toString());
 * > Discrete [640, 480, 3]
 *
 * let action = env.action_space.sample();
 * let [obs, rew, done, info] = env.step(action);
 * ```
 */
export default class Snake implements Env {
    /**
     * @param config - A configuration object, detailing the game settings. See
     * the default config below.
     */
    constructor(config?: {});
    game: Phaser.Game;
    config: {};
    /**
     * Possible Actions:
     * 0. left
     * 1. up
     * 2. right
     * 3. down
     * The snake is not able to move opposite its current direction.
     */
    action_space: Discrete;
    /**
     * The pixel values of the game (640x480).
     */
    observation_space: Discrete;
    /**
     * The value of eating the food:
     * - +1 for eating food
     * - -1 for crashing into itself
     * - 0 else
     */
    reward_range: Discrete;
    renderDisplay: boolean;
    done: boolean;
    verbose: boolean;
    readonly info: {};
    step(action: number): [tf.Tensor, number, boolean, {}];
    reset(config?: {}): tf.Tensor;
    render(value?: boolean): void;
    close(removeCanvas?: boolean): void;
    seed(seed: number): void;
    private _getObs;
    private _setAction;
    private _checkDone;
    private _getReward;
}
//# sourceMappingURL=Snake.d.ts.map
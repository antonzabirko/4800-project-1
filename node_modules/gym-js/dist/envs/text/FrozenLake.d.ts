import Env from '../../core';
import Discrete from '../../spaces/discrete';
import Space from '../../spaces/space';
import * as tf from '@tensorflow/tfjs';
/**
 * An environment implementing the toy text "Frozen Lake" game.
 *
 * Actions:
 *  0. Up.
 *  1. Right.
 *  2. Down.
 *  3. Left.
 *
 * Rewards:
 *  - 1: If reach target 'G'.
 *  - 0: Otherwise.
 *
 * @example
 * ```typescript
 * import {FrozenLake} from "gym-js";
 * let mapSize=4,p=0.8,isSlippery=false;
 * const env = new FrozenLake(mapSize, p, isSlippery);
 *
 * console.log(env.action_space.toString());
 * > Discrete: 4    // 4 possible movements
 * console.log(env.observation_space.toString());
 * > Discrete: 16   // 4x4 map
 *
 * let action = env.action_space.sample();
 * let [obs, rew, done, info] = env.step(action);
 * ```
 */
export default class FrozenLake implements Env {
    /**
     * @param mapSize - The size of the map
     * @param p - The probability of not slipping
     * @param isSlippery - Set the ice to slippery or not. This makes the agent move
     * in a random direction with probability `1-p`.
     */
    constructor(mapSize?: number, p?: number, isSlippery?: boolean);
    action_space: Discrete;
    observation_space: Discrete;
    reward_range: Space;
    done: boolean;
    map: string[][];
    isSlippery: boolean;
    mapSize: number;
    p: number;
    row: number;
    col: number;
    mustRender: boolean;
    renderMode: string;
    HTMLData: string;
    step(action: number): [tf.Tensor, number, boolean, {}];
    reset(): tf.Tensor;
    /**
     * Set the environment to render to a particular output ("html" or "console").
     *
     * @param mode - To render in a particular mode - either "html" or "console".
     */
    render(mode?: string): void;
    private _callRender;
    renderHTML(): string;
    close(): void;
    seed(seed: number): void;
    private move;
    private inMap;
    private _toObs;
}
//# sourceMappingURL=FrozenLake.d.ts.map
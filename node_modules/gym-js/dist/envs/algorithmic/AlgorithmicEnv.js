"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var discrete_1 = require("../../spaces/discrete");
var utils_1 = require("../../utils");
/**
 * Abstract environment for algorithms.
 *
 * Action: A tuple containing [
 *  the move over the input,
 *  whether to write to the output,
 *  the predicted character
 * ]
 *
 * Observations: The character under the read cursor.
 *  A total of `base` + 1 with an extra out-of-bounds
 *  character.
 *
 * The environment terminates immediately when an incorrect item
 * is written or when the entire output is successfully outputted.
 */
var AlgorithmicEnv = /** @class */ (function () {
    /**
     * @param movements The possible movements that the agent can make.
     * @param base Number of distinct characters.
     */
    function AlgorithmicEnv(movements, base) {
        if (base === void 0) { base = 10; }
        this.MIN_LENGTH = 5;
        this.base = base;
        this.MOVEMENTS = movements;
        this.action_space = new discrete_1.DiscreteTuple([this.MOVEMENTS.length, 2, this.base]);
        this.observation_space = new discrete_1.default([this.base + 1]);
        this.charmap = utils_1.range(base).map(function (i) { return String(i); }); // range*rows for grid env
        this.charmap.push('_');
        this.mustRender = false;
        // this.seed();
        this.reset();
    }
    AlgorithmicEnv.prototype.step = function (action) {
        // Check that action is in action space!
        if (!this.done) {
            // Write char
            if (action[1] === 1) {
                this.agentActions[this.cursor] = action[2];
                if (action[2] === this.target[this.cursor]) {
                    this.reward = 1;
                }
                else {
                    this.done = true;
                    this.reward = -0.5;
                }
            }
            // Move cursor
            this.move(action);
            this.observation_space.set(this.toObs());
        }
        else {
            console.warn('The environment has returned `done=True`. You should call `reset` before continuing.');
        }
        this._attemptRender();
        return [this.observation_space.get(), this.reward, this.done, {}];
    };
    AlgorithmicEnv.prototype.reset = function () {
        this.targetLength = utils_1.toNumLike(utils_1.randint(3)) + this.MIN_LENGTH;
        this.inputData = this.genInputData(this.targetLength);
        this.setTarget(this.inputData.slice());
        this.done = false;
        this.reward = 0.0;
        this.cursor = 0;
        this.agentActions = utils_1.range(this.targetLength).map(function () { return -1; });
        this.observation_space.set(this.toObs());
        this._attemptRender();
        return this.observation_space.get();
    };
    /**
     * Set the environment to render to a particular output ("html" or "console").
     *
     * @param mode - To render in a particular mode - either "html" or "console".
     */
    AlgorithmicEnv.prototype.render = function (mode) {
        if (mode === void 0) { mode = "html"; }
        var renderModes = ["html", "console"];
        console.assert(renderModes.includes(mode), "Mode " + mode + " is not recognized, try any of " + renderModes.toString() + ".");
        this.mustRender = true;
        this.renderMode = mode;
    };
    AlgorithmicEnv.prototype._attemptRender = function () {
        var _this = this;
        if (this.mustRender) {
            if (this.renderMode === "html") {
                this.HTMLData = "\n        <style>.currentState{background-color: red}</style>\n        <div class=\"game-input\"><span" + this.inputData.map(function (v, i) { return (i == _this.cursor ? ' class="currentState">' : ">")
                    + _this.charmap[v]; }).join("</span><span") + "</span></div>\n        <div class=\"game-target\">" + this.target.map(function (i) { return _this.charmap[i]; }).join("") + "</div>\n        <div class=\"agent-preds\">" + this.agentActions.map(function (i) { return "<span>" + (i === -1 ? "_" : _this.charmap[i]) + "</span>"; }).join("") + "</div>\n        ";
            }
            else if (this.renderMode === "console") {
                console.log('-'.repeat(20));
                console.log('Input:', this.inputData.map(function (i) { return _this.charmap[i]; }).join(''));
                console.log('Target:', this.target.map(function (i) { return _this.charmap[i]; }).join(''));
                console.log('Predictions:', this.agentActions.map(function (i) { return (i === -1 ? '_' : _this.charmap[i]); }).join(''));
                console.log('Obs:', this.getStrObs());
                console.log('-'.repeat(20));
            }
        }
    };
    AlgorithmicEnv.prototype.renderHTML = function () {
        return this.HTMLData;
    };
    AlgorithmicEnv.prototype.close = function () {
        console.clear();
        this.mustRender = false;
        this.HTMLData = "";
    };
    AlgorithmicEnv.prototype.seed = function (seed) { };
    AlgorithmicEnv.prototype.getStrObs = function () {
        var ret = Number(this.toObs());
        return this.charmap[ret];
    };
    return AlgorithmicEnv;
}());
/**
 * A 1 dimensional algorithmic env.
 *
 * Environment observations wrap around tape with an additional
 * observation for the out-of-bounds case.
 *
 * The `MIN_LENGTH` of the tape is `5` plus a random number between
 * 0 and 2.
 */
var TapeAlgorithmicEnv = /** @class */ (function (_super) {
    __extends(TapeAlgorithmicEnv, _super);
    function TapeAlgorithmicEnv(base) {
        if (base === void 0) { base = 10; }
        return _super.call(this, ['Left', 'Right'], base) || this;
    }
    TapeAlgorithmicEnv.prototype.move = function (action) {
        if (action[0] === 0 && this.cursor <= 0) {
            this.cursor = this.targetLength;
        }
        else if (action[0] === 1 && this.cursor >= this.targetLength) {
            this.cursor = 0;
        }
        else {
            if (action[0] === 0) {
                this.cursor -= 1;
            }
            else if (action[0] === 1) {
                this.cursor += 1;
            }
        }
    };
    TapeAlgorithmicEnv.prototype.toObs = function () {
        if (this.cursor === this.targetLength)
            return this.base;
        return this.inputData[this.cursor];
    };
    TapeAlgorithmicEnv.prototype.genInputData = function (size) {
        return utils_1.randint(this.base, undefined, size);
    };
    return TapeAlgorithmicEnv;
}(AlgorithmicEnv));
exports.TapeAlgorithmicEnv = TapeAlgorithmicEnv;
/**
 * A 2 dimensional algorithmic env.
 * Not tested yet.
 */
var GridAlgorithmicEnv = /** @class */ (function (_super) {
    __extends(GridAlgorithmicEnv, _super);
    function GridAlgorithmicEnv(rows, base) {
        if (base === void 0) { base = 10; }
        var _this = _super.call(this, ['Up', 'Right', 'Down', 'Left'], base) || this;
        _this.rows = rows;
        return _this;
    }
    GridAlgorithmicEnv.prototype.move = function (action) {
        // TODO: Out of bounds check
        if (action[0] === 0) {
            this.row -= 1;
        }
        else if (action[0] === 1) {
            this.col += 1;
        }
        else if (action[0] === 2) {
            this.row += 1;
        }
        else if (action[0] === 3) {
            this.col -= 1;
        }
        this.cursor = this.row * this.base + this.col;
    };
    GridAlgorithmicEnv.prototype.toObs = function () {
        return this.inputData[this.cursor];
    };
    GridAlgorithmicEnv.prototype.genInputData = function (size) {
        var _this = this;
        return utils_1.range(this.rows).map(function () { return utils_1.randint(_this.base, undefined, size); });
    };
    return GridAlgorithmicEnv;
}(AlgorithmicEnv));
exports.GridAlgorithmicEnv = GridAlgorithmicEnv;
/**
 * Decode the algorithmic env tuple action_space into an object containing
 * the decoded movement, write boolean, and the character to write.
 *
 * @param action An action in the `action_space` of the env.
 * @param movements The allowed movements of the env.
 */
function decodeAction(action, movements) {
    return { Movement: movements[action[0]], Write: Boolean(action[1]).toString(), Character: String(action[2]) };
}
exports.decodeAction = decodeAction;

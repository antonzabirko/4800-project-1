"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AlgorithmicEnv_1 = require("./AlgorithmicEnv");
/**
 * A 1D algorithmic environment where the target is the same
 * as the observation.
 *
 * The 1D [[TapeAlgorithmicEnv]] has an `action_space` tuple
 * with shape [2,2,10]. The first item is the chosen movement,
 * either left or right. The second item is whether to write
 * to the current position or not. Finally, the last value is
 * the actual value to write to the tape in the current position.
 * The environment terminates immediately when an incorrect item
 * is written or when the entire output is successfully outputted.
 * The `MIN_LENGTH` of the tape is `5` plus a random number between
 * 0 and 2.
 *
 * @example
 * ```typescript
 * import {Copy} from "gym-js";
 * let base = 10;
 * const env = new Copy(base);
 *
 * console.log(env.action_space.toString());
 * > DiscreteTuple: 2,2,10
 * console.log(env.observation_space.toString());
 * > Discrete: 11
 *
 * let action = env.action_space.sample();
 * let [obs, rew, done, info] = env.step(action);
 * ```
 */
var Copy = /** @class */ (function (_super) {
    __extends(Copy, _super);
    function Copy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Copy.prototype.setTarget = function (input_data) {
        this.target = input_data;
    };
    return Copy;
}(AlgorithmicEnv_1.TapeAlgorithmicEnv));
exports.default = Copy;
/**
 * Demo of the [[Copy]] environment.
 */
function demo() {
    var game = new Copy(3);
    game.render();
    var done = false;
    var outerEnv = document.getElementById('game');
    window.setInterval(function () {
        if (!done) {
            outerEnv.innerHTML = game.renderHTML();
            var action = game.action_space.sample();
            console.log('Action:\n', AlgorithmicEnv_1.decodeAction(action, game.MOVEMENTS));
            var stepInfo = game.step(action);
            console.log('Env obs:', stepInfo[0]);
            console.log('Env rew:', stepInfo[1]);
            done = stepInfo[2];
        }
        else {
            game.reset();
            done = false;
            console.log('Game terminated, resetting.');
            console.log('---------------------------');
        }
    }, 1000);
}
module.exports.demo = demo;

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Wrap an [[Env]]
 *
 * This class is constructed with any gym.js `Env`. The methods
 * of the wrapper will be the same as that of the env. This
 * class can be used to preprocess the outputs of any of the
 * env methods by changing the call to the method.
 *
 * @example
 * ```typescript
 * import {Wrapper, FrozenLake} from "gym-js";
 * env = new Wrapper(new FrozenLake());
 * ```
 */
var Wrapper = /** @class */ (function () {
    /**
     * @param env - The environment to wrap. Can also be another `Wrapper`.
     */
    function Wrapper(env) {
        this.env = env;
        this.action_space = env.action_space;
        this.observation_space = env.observation_space;
    }
    Wrapper.prototype.step = function (action) {
        return this.env.step(action);
    };
    Wrapper.prototype.reset = function () {
        return this.env.reset();
    };
    Wrapper.prototype.toString = function () {
        return "<Wrapper>" + this.env.toString() + "</Wrapper>";
    };
    return Wrapper;
}());
exports.Wrapper = Wrapper;
var ObservationWrapper = /** @class */ (function (_super) {
    __extends(ObservationWrapper, _super);
    function ObservationWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObservationWrapper.prototype.step = function (action) {
        var _a = this.env.step(action), obs = _a[0], rew = _a[1], done = _a[2], info = _a[3];
        return [this.observation(obs), rew, done, info];
    };
    ObservationWrapper.prototype.reset = function () {
        return this.observation(this.env.reset());
    };
    ObservationWrapper.prototype.observation = function (obs) {
        return obs;
    };
    ObservationWrapper.prototype.toString = function () {
        return "<ObservationWrapper>" + this.env.toString() + "</ObservationWrapper>";
    };
    return ObservationWrapper;
}(Wrapper));
exports.ObservationWrapper = ObservationWrapper;
var ActionWrapper = /** @class */ (function (_super) {
    __extends(ActionWrapper, _super);
    function ActionWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionWrapper.prototype.step = function (action) {
        action = this.action(action);
        return this.env.step(action);
    };
    ActionWrapper.prototype.action = function (act) {
        return act;
    };
    ActionWrapper.prototype.toString = function () {
        return "<ActionWrapper>" + this.env.toString() + "</ActionWrapper>";
    };
    return ActionWrapper;
}(Wrapper));
exports.ActionWrapper = ActionWrapper;
var RewardWrapper = /** @class */ (function (_super) {
    __extends(RewardWrapper, _super);
    function RewardWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RewardWrapper.prototype.step = function (action) {
        var _a = this.env.step(action), obs = _a[0], rew = _a[1], done = _a[2], info = _a[3];
        return [obs, this.reward(rew), done, info];
    };
    RewardWrapper.prototype.reward = function (rew) {
        return rew;
    };
    RewardWrapper.prototype.toString = function () {
        return "<RewardWrapper>" + this.env.toString() + "</RewardWrapper>";
    };
    return RewardWrapper;
}(Wrapper));
exports.RewardWrapper = RewardWrapper;

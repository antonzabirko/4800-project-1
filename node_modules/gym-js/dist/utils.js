"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** @ignore */
function choice(array) {
    var array_fix = toArrayLike(array);
    var index = Math.floor(Math.random() * array_fix.length);
    return array[index];
}
exports.choice = choice;
/** @ignore */
function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
exports.sleep = sleep;
/** Convert an array-like type to an actual array. */
function toArrayLike(obj) {
    return obj.hasOwnProperty('length') ? obj : [obj];
}
exports.toArrayLike = toArrayLike;
/** Convert a num-like type to an actual number. */
function toNumLike(obj) {
    if (obj.hasOwnProperty('length') && obj.length > 1) {
        console.warn('Ambiguous conversion from array with more than one value. Using first element.');
    }
    return obj.hasOwnProperty('length') ? obj[0] : obj;
}
exports.toNumLike = toNumLike;
/**
 * Get a range of numbers.
 *
 * @param s1 - The end of the range if `s2` is undefined else the start.
 *  Starting at 0.
 * @param s2 - The end of the range.
 */
function range(s1, s2) {
    if (s2 === undefined)
        return new Array(s1).fill(undefined).map(function (_, i) { return i; });
    return new Array(s2 - s1).fill(undefined).map(function (_, i) { return i + s1; });
}
exports.range = range;
/**
 * Get a random array of integers with size `n` in the range [0; s1) or [s1, s2).
 *
 * @param s1 - The maximum random value (not inclusive) if `s2` is undefined else the minimum (inclusive).
 * @param s2 - The maximum random value (not inclusive).
 * @param n - The size of the array to return. If 1, returns `number`.
 * @returns - An array of random values.
 */
function randint(s1, s2, n) {
    if (n === void 0) { n = 1; }
    if (n === 1) {
        if (s2 !== undefined)
            return Math.floor(Math.random() * (s2 - s1) + s1);
        return Math.floor(Math.random() * s1);
    }
    if (s2 !== undefined)
        return range(n).map(function () { return Math.floor(Math.random() * (s2 - s1) + s1); });
    return range(n).map(function () { return Math.floor(Math.random() * s1); });
}
exports.randint = randint;
